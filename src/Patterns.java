/* Interesting patterns for Conway's Game of Life and a method for adding them
   to an Environment */

import java.util.ArrayList;

public class Patterns
{
    /* oscillators */
    public static final int[][] BLINKER = {
            {0,0,0},
            {1,1,1},
            {0,0,0}};

    public static final int[][] TOAD = {
            {0,1,1,1},
            {1,1,1,0}};

    public static final int[][] PULSAR = {
            {0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1 },
            {1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1 },
            {1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1 },
            {0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0 },
            {1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1 },
            {1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1 },
            {1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0 }};

    public static final int[][] QUEEN_BEE_SHUTTLE = {
            {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0},
            {1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1},
            {1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1},
            {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0}};




    /* spaceships */
    public static final int[][] GLIDER = {
            {0,1,0},
            {0,0,1},
            {1,1,1}};

    public static final int[][] LWSS = {
            {0,1,1,1,1},
            {1,0,0,0,1},
            {0,0,0,0,1},
            {1,0,0,1,0}};

    public static final int[][] SPARKY = {
            {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0},
            {0,0,0,0,0,0,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0},
            {1,0,1,1,0,1,1,0,1,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,1,0,0,0,0,0,0},
            {1,0,0,0,1,1,0,0,1,0,1,1,0,0,1,1,1,0,0,1,0,1,1,0,0,1,1,0,0,0,1},
            {1,0,1,1,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0},
            {0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1},
            {1,0,1,1,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0},
            {1,0,0,0,1,1,0,0,1,0,1,1,0,0,1,1,1,0,0,1,0,1,1,0,0,1,1,0,0,0,1},
            {1,0,1,1,0,1,1,0,1,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,1,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0},
            {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

    /* Methuselahs */

    public static final int[][] ACORN = {
            {0,0,0,0,0,0,0,0,0},
            {0,0,1,0,0,0,0,0,0},
            {0,0,0,0,1,0,0,0,0},
            {0,1,1,0,0,1,1,1,0},
            {0,0,0,0,0,0,0,0,0}};

    /* Add your makePattern() method below. */

    public static boolean makePattern(Environment e, int vertical, int horizontal, int[][] pattern) {

        if (!e.isWithinBoundsH(horizontal + pattern[0].length - 1) || !e.isWithinBoundsV(vertical + pattern.length - 1)) {
            return false;
        }

        for (int i = 0; i < pattern.length; i++) {
            for (int j = 0; j < pattern[i].length; j++) {
                e.getCell(vertical + i, horizontal + j).setStatus(pattern[i][j] == 1);
            }
        }
        return true;
    }
}